<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PinkGuy主页</title>
    <link>https://pinkguy233.github.io/post/</link>
    <description>Recent content in Posts on PinkGuy主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 10:34:16 +0800</lastBuildDate>
    
	<atom:link href="https://pinkguy233.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>springboot整合</title>
      <link>https://pinkguy233.github.io/post/spring_mybatis/</link>
      <pubDate>Wed, 25 Dec 2019 10:34:16 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/spring_mybatis/</guid>
      <description>创建一个 Spring Initializr项目 参照 ： 第一个Springboot
    本文不使用application.properties文件 而使用更加简洁的application.yml文件。将resource文件夹下原有的application.properties文件删除，创建application.yml配置文件（备注：其实SpringBoot底层会把application.yml文件解析为application.properties），本文创建了两个yml文件（application.yml和application-dev.yml），分别来看一下内容  application.yml
spring: profiles: active: dev  application-dev.yml
server: port: 8080 spring: datasource: username: root password: 333 url: jdbc:mysql://localhost:3306/smbms driver-class-name: com.mysql.jdbc.Driver mybatis: mapper-locations: classpath:mapper/*Mapper.xml type-aliases-package: com.example.ssm.entity   创建 对应的表，（用自己的就好） 创建包controller，entity，service，dao（习惯把数据层叫dao）。resources下创建mapper 文件夹，用于写sql语句； 直接贴代码  User.java (记得get set )
public class User { private int id; private String userCode; private String userName; private String userPassword; }  UserDao.java</description>
    </item>
    
    <item>
      <title>yml配置学习</title>
      <link>https://pinkguy233.github.io/post/application%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 25 Dec 2019 10:34:16 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/application%E9%85%8D%E7%BD%AE/</guid>
      <description>默认全局配置文件：
​ application.properties：
 k = v；  ​ application.yml :
 k：空格v
 yaml ain&amp;rsquo;t myarkup language(yaml不是一个标记文档，xml是标记文档)
  试用 application.yml  创建实体类（給上get set）
 public class Student { private String name; private int age; private boolean sex; private Date birthday; private Map location; private List hobbies; private String[] skills; private Pet pet; }  编写application.yml
 student: name: zs age: 28 sex: false birthday: 2019/12/24 #时间 location: {province: 新疆,city: 西安} #map hobbies: #list集合 - 足球 - 篮球 skills: # 数组 - 编程 pet:	# 特殊对象 pname: 刘波 page: 8  再在实体类加上（注解）</description>
    </item>
    
    <item>
      <title>第一个Springboot</title>
      <link>https://pinkguy233.github.io/post/%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot/</link>
      <pubDate>Mon, 23 Dec 2019 10:31:16 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/%E7%AC%AC%E4%B8%80%E4%B8%AAspringboot/</guid>
      <description> 创建一个SpringBoot-Maven文件；  方式1：可以直接从Idea工具中选择Spring Initializr创建Maven工程，然后导入相关jar包；（第一次导入会很慢） 方式2：进入 https://start.spring.io/ 直接创建项目，再使用工具导入 Maven项目；  创建一个Controller测试； @Controller public class HelloWorldController { @ResponseBody @RequestMapping(&amp;quot;hello&amp;quot;) public String helloWorld() { return &amp;quot;HelloWord,SpringBoot&amp;quot;; } }  注意：使用@SpringBootApplication 注解 Controller必须在该注解所在包下；
 @SpringBootConfiguration  包含@Configuration，表示:1.该类是一个配置类，2.会自动纳入Spring容器中  @EnableAutoConfiguration  运行项目 </description>
    </item>
    
    <item>
      <title>Ssh框架搭建步骤</title>
      <link>https://pinkguy233.github.io/post/ssh%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Fri, 13 Dec 2019 09:49:57 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/ssh%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</guid>
      <description> 1.导入相关jar包  hibaernate spring hibernate+spring 连接池(ommons-dbcp) struts2 struts2+spring 数据库驱动 servlet-api(看情况)  2.配置hibernate并测试 &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE hibernate-configuration PUBLIC &amp;quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;quot; &amp;quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt; &amp;lt;hibernate-configuration&amp;gt; &amp;lt;session-factory&amp;gt; &amp;lt;property name=&amp;quot;connection.driver_class&amp;quot;&amp;gt; oracle.jdbc.OracleDriver &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;connection.url&amp;quot;&amp;gt; jdbc:oracle:thin:@192.168.206.1:1521:orcl &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;connection.username&amp;quot;&amp;gt;scott&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;connection.password&amp;quot;&amp;gt;333&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;dialect&amp;quot;&amp;gt; org.hibernate.dialect.Oracle10gDialect &amp;lt;/property&amp;gt; &amp;lt;/session-factory&amp;gt; &amp;lt;/hibernate-configuration&amp;gt;   再写个工具类测试  3.将 hibernate 关联到 spring 并测试 &amp;lt;!-- 关联hibernate配置文件 --&amp;gt; &amp;lt;bean id=&amp;quot;sessionFactory&amp;quot; class=&amp;quot;org.springframework.orm.hibernate3.LocalSessionFactoryBean&amp;quot;&amp;gt; &amp;lt;property name=&amp;quot;configLocation&amp;quot;&amp;gt; &amp;lt;value&amp;gt;classpath:hibernate.cfg.xml&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt;  4.配置Struts2 </description>
    </item>
    
    <item>
      <title>Hibernate搭建步骤</title>
      <link>https://pinkguy233.github.io/post/hibernate/</link>
      <pubDate>Fri, 29 Nov 2019 09:32:21 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/hibernate/</guid>
      <description>1.导入相关的jar包 ![jar]()
2.配置hibernate主配置  创建名字默认hibernate.cfg.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE hibernate-configuration PUBLIC &amp;quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&amp;quot; &amp;quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&amp;quot;&amp;gt; &amp;lt;hibernate-configuration&amp;gt; &amp;lt;session-factory&amp;gt; &amp;lt;!-- 1.配置数据库信息 --&amp;gt; &amp;lt;!--必须有的 --&amp;gt; &amp;lt;property name=&amp;quot;connection.url&amp;quot;&amp;gt; jdbc:oracle:thin:@192.168.206.1:1521:orcl &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;connection.driver_class&amp;quot;&amp;gt; oracle.jdbc.driver.OracleDriver &amp;lt;/property&amp;gt; &amp;lt;property name=&amp;quot;connection.username&amp;quot;&amp;gt;scott&amp;lt;/property&amp;gt;&amp;lt;!-- 用户 --&amp;gt; &amp;lt;property name=&amp;quot;connection.password&amp;quot;&amp;gt;333&amp;lt;/property&amp;gt;&amp;lt;!-- 密码 --&amp;gt; &amp;lt;property name=&amp;quot;dialect&amp;quot;&amp;gt; org.hibernate.dialect.ProgressDialect &amp;lt;/property&amp;gt; &amp;lt;!-- 辅助文件 --&amp;gt; &amp;lt;property name=&amp;quot;show_sql&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;!-- 输出底层sql语句 --&amp;gt; &amp;lt;property name=&amp;quot;format_sql&amp;quot;&amp;gt;true&amp;lt;/property&amp;gt; &amp;lt;!-- 输出底层sql语句格式 --&amp;gt; &amp;lt;!-- 添加映射文件 --&amp;gt; &amp;lt;mapping resource=&amp;quot;dept.hbm.xml&amp;quot;/&amp;gt; &amp;lt;/session-factory&amp;gt; &amp;lt;/hibernate-configuration&amp;gt;   3.测试配置是否正常  工具类
public class Hibernate { static SessionFactory factory; static Session session = null; static { Configuration cfg = new Configuration().</description>
    </item>
    
    <item>
      <title>Plsql</title>
      <link>https://pinkguy233.github.io/post/plsql/</link>
      <pubDate>Wed, 27 Nov 2019 21:34:16 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/plsql/</guid>
      <description>&amp;ndash; 来自PinkGuy
 输出语句
dbms_output.put_line();   变量定义  普通定义  变量名在左边，数据类型在右边
declare psex char(3) :=&#39;男&#39;; begin end;   应用型变量，存放一个单元格的值  当不确定数据类型时候可以使用；
左边变量名， 右边表名.字段名%type
declare pname emp.ename%type; begin end;   记录型变量，存放一个对象  左边变量名， 右边表名.字段名%rowtype;
declare emp_info emp%rowtype; begin end;  if语句  if
declare begin if 条件 then -- 循环体 end if; end;  if..else
declare begin if 条件 then -- 循环体 else -- 循环体 end if; end;  elseif</description>
    </item>
    
    <item>
      <title>序列</title>
      <link>https://pinkguy233.github.io/post/%E5%BA%8F%E5%88%97/</link>
      <pubDate>Tue, 26 Nov 2019 10:24:57 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/%E5%BA%8F%E5%88%97/</guid>
      <description>序列：用于生产唯一，连续的对象（模拟自增）
 本质就是内存中的数组
-- 数组长度20 [1,2,3,4,..,20][21,22,..,40]   创建序列 -- create sequence 序列名 create sequence myseq;  创建序列时，会自带默认值；
start with 10	-- 起始值 指定序号从#开始; increment by 10	--步长 指定序号之间的间隔为#; maxvalue 200	--最大值 表示序列最大值为#； minvalue 10	--最小值 表示序列最小值为#； cycle | nocycle	-- (默认不循环) 达到最大值之后是否生成下一个值; cache n | no cache -- (默认no cache)  -- 查询刚刚创建的序列 select * from user_sequences; -- 创建的序列 SEQUENCE_NAME MIN_VALUE MAX_VALUE INCREMENT_BY C O CACHE_SIZE LAST_NUMBER ------------------------------ ---------- ---------- ------------ - - ---------- ----------- MYSEQ 1 1.</description>
    </item>
    
    <item>
      <title>rownum和rowid伪列</title>
      <link>https://pinkguy233.github.io/post/%E4%BC%AA%E5%88%97/</link>
      <pubDate>Mon, 25 Nov 2019 19:54:07 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/%E4%BC%AA%E5%88%97/</guid>
      <description>伪列介绍：  伪列不存在于任何一张表中，但是会被所有的表共享 伪列可以从表中查询，但不能进行DML操作 常用的伪列有ROWID和ROWNUM  现有一张stuInfo表，对该表进行操作&amp;mdash;
 STUNO STUNAME STUAGE STUID STUSEAT ---------- ---------------------------------------- ---------- ---------- ---------- 1 张三 18 1 2 李四 20 2 3 王五 15 3 4 张三 18 4 5 张三 20 5  DISTINCT（去重）关键字  不重复显示所有学员姓名和年龄 select DISTINCT stuName,stuAge From stuInfo
STUNAME STUAGE ---------------------------------------- ---------- 王五 15 张三 20 张三 18 李四 20   可以看到少了一条学号4的数据；
查询学生姓名，年龄，rowid与rownum （注意需要给表加别名）
select rowid,rownum,s.stuname,s.stuage from stuInfo s  ROWID ROWNUM STUNAME STUAGE ------------------------------------------------------------------------- AAARUyAAEAAAAGQAAA 1 张三 18 AAARUyAAEAAAAGQAAB 2 李四 20 AAARUyAAEAAAAGQAAC 3 王五 15 AAARUyAAEAAAAGQAAD 4 张三 18 AAARUyAAEAAAAGQAAE 5 张三 20    ROWNUM ：逻辑序列  不用的sql语句在执行时，rownum的值不一致；</description>
    </item>
    
    <item>
      <title>数据类型</title>
      <link>https://pinkguy233.github.io/post/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 24 Nov 2019 13:41:06 +0800</pubDate>
      
      <guid>https://pinkguy233.github.io/post/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>前言： 程序当中有很多数据，每一个数据都是有相关的数据类型的，不同的数据类型占用空间的大小也不同.
数据类型的作用是指导JVM运行程序的时候给该数据分配多大的内存空间。
数据类型-介绍 java中的数据类型包括两种：  基本数据类型 引用数据类型 ###关于基本数据类型： 基本数据类型包括 四大类 八小种     第一类：整数型 第二类：浮点型     byte，short，int，long float,double       第三类：布尔型 第四类：字符型     boolean char    字符串属于==引用数据类型  字符串使用双引号“A”， 字符 使用双引号‘A’；  八种数据类型各自所占用空间大小是多少？    基本数据类型 占用空间大小【单位：字节】     byte 1   short 2   int 4   long 8   float 4   double 8   boolean 1   char 2    计算机在任何情况下只能识别二进制.</description>
    </item>
    
  </channel>
</rss>